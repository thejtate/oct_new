<?php

/**
 * @file
 * Oct store discounts
 */

/**
 * Discount type params
 */
function oct_store_discounts_types_info() {
  return array(
    'manual' => array(
      'discount_code' => TRUE,//require or not discount code on checkout form
      'products_filter_in_node' => TRUE,//allow select products in discount settings
      'handler' => 'oct_store_discounts_manual_handler'
    ),
    'class_camps_multiple' => array(
      'discount_code' => FALSE,
      'products_filter_in_node' => FALSE,
      'products' => array('product_camp', 'product_class'),
      'handler' => 'oct_store_discounts_class_camps_multiple_handler',
    )
  );
}

/**
 * Implements hook_permission().
 */
function oct_store_discounts_permission() {
  $return = array();

  $return['oct store discounts administer'] = array(
    'title' => t('Oct store discounts administer'),
    'description' => t('Allow to the user to edit oct store discount settings.'),
  );

  return $return;
}

/**
 * Implements hook_fnl_store_cart_calculation_alter().
 *
 * @param $order
 * @param $cart
 */
function oct_store_discounts_fnl_store_cart_calculation_alter(&$order, $cart) {

  //remove old order discounts
  $order->data['amount_modifications']['discounts'] = array();

  if(empty($cart['products'])) {
    return;
  }

  $discounts = oct_store_discounts_load_active();
  $discount_types_info = oct_store_discounts_types_info();

  module_load_include('inc', 'oct_store_discounts', 'includes/oct_store_discounts.handlers');

  //run discount handlers
  foreach ($discounts as $discount) {
    if (!empty($discount_types_info[$discount->type]['handler']) &&
      function_exists($discount_types_info[$discount->type]['handler'])
    ) {
      $handler = $discount_types_info[$discount->type]['handler'];
      call_user_func_array($handler, array($order, $cart, $discount, $discount_types_info[$discount->type]));
    }
  }

  //check amount after discounts, it can`t be lower than 0
  $order->amount = ($order->amount >= 0) ? $order->amount : 0;
}

/**
 * Implements hook_form_alter().
 */
function oct_store_discounts_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'fnl_store_checkout_form') {

    $form['cart']['#weight'] = -2;

    //add discount block to checkout form
    $form['discount'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Enter discount code'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#weight' => -1,
    );

    $form['discount']['mesage_arrea'] = array(
      '#markup' => '<div class="discount-messages-area"></div>',
    );

    $form['discount']['discount_code'] = array(
      '#type' => 'textfield',
      '#required' => FALSE,
      '#title' => t('Enter discount code in the textfield.'),
    );

    $cart_wrapper_id = 'oct-store-discounts-cart-wrapper';

    $form['cart']['#prefix'] = '<div id="' . $cart_wrapper_id . '">';
    $form['cart']['#suffix'] = '</div>';
    if(!empty($form['partial_payment'])) {
      $form['partial_payment']['#prefix'] = '<div id="oct-store-partial-payment-wrap">';
      $form['partial_payment']['#suffix'] = '</div>';
    }

    $form['discount']['discount_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Click to calculate discounts'),
      '#name' => 'apply_discount',
      '#limit_validation_errors' => array(array('discount', 'discount_code')),
      '#submit' => array('oct_store_discounts_apply_discount_on_checkout_submit'),
      '#ajax' => array(
        'callback' => 'oct_store_discounts_apply_discount_on_checkout',
        'wrapper' => $cart_wrapper_id,
        'effect' => 'fade',
        'speed' => 'slow',
      ),
    );
  }
}

/**
 * Ajax callback
 */
function oct_store_discounts_apply_discount_on_checkout($form, $form_state) {

  $ajax_commands = array();

  $ajax_commands[] = ajax_command_replace(NULL, drupal_render($form['cart']));
  $ajax_commands[] = ajax_command_replace('.discount-messages-area', '<div class="discount-messages-area">' . theme('status_messages') . '</div>');
  if(!empty($form['partial_payment'])) {
    $ajax_commands[] = ajax_command_replace('#oct-store-partial-payment-wrap', drupal_render($form['partial_payment']));
  }

  return array('#type' => 'ajax', '#commands' => $ajax_commands);
}

/**
 * Apply discount form submit.
 */
function oct_store_discounts_apply_discount_on_checkout_submit($form, &$form_state) {

  if(!empty($form_state['values']['discount']['discount_code'])) {

    if(!flood_is_allowed('oct_store_apply_discount', 7, 3600)) {
      drupal_set_message('Sorry, there have been more than 7 failed attempts for this account. It is temporarily blocked', 'error');
      $form_state['rebuild'] = TRUE;
      return;
    }

    $code = $form_state['values']['discount']['discount_code'];
    $discounts = oct_store_discounts_load_active_by_code($code);

    if(!empty($discounts)) {
      //discounts exist for given code, add discount flag to order and recalculate it
      $order = &$form_state['order'];

      foreach ($discounts as $discount) {
        if(empty($order->data['triggered_discounts_nids']) || !in_array($discount->nid, $order->data['triggered_discounts_nids'])) {
          //add discount nid to order, and this discount will be applied in order calculations
          $order->data['triggered_discounts_nids'][] = $discount->nid;
          drupal_set_message(t('Discount "!name" applied', array('!name' => $discount->title)));
        }
      }
      fnl_store_order_save($order);
    } else {
      drupal_set_message('Invalid code', 'error');
      flood_register_event('oct_store_apply_discount', 3600);
    }
  }

  //update checkout form, on generating checkout form order will be recalculated
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter store_discount_node_form
 */
function oct_store_discounts_form_store_discount_node_form_alter(&$form, $form_state) {

  $discount_types_info = oct_store_discounts_types_info();

  $disc_with_products_filter_in_node = array_filter($discount_types_info, function ($v) { return !empty($v['products_filter_in_node']); } );
  $disc_with_code = array_filter($discount_types_info, function ($v) { return !empty($v['discount_code']); } );

  //Add states
  foreach ($disc_with_products_filter_in_node as $name => $params) {
    $form['field_s_discount_products'][LANGUAGE_NONE]['#states']['visible'][] = array(
        ':input[name^="field_s_discount_type"]' => array('value' => $name),
    );
  }

  foreach ($disc_with_code as $name => $params) {
    $form['field_s_discount_code'][LANGUAGE_NONE][0]['value']['#states']['visible'][] = array(
      ':input[name^="field_s_discount_type"]' => array('value' => $name),
    );
    $form['field_s_discount_code'][LANGUAGE_NONE][0]['value']['#states']['required'][] = array(
      ':input[name^="field_s_discount_type"]' => array('value' => $name),
    );
  }

  $form['#validate'][] = 'oct_store_discounts_node_form_validate';
}


/**
 * Validate discount node save.
 */
function oct_store_discounts_node_form_validate($form, &$form_state) {

  $discount_types_info = oct_store_discounts_types_info();

  $node_discount_type = $form_state['values']['field_s_discount_type'][LANGUAGE_NONE][0]['value'];

  //check code field for discount types that require code
  if (!empty($discount_types_info[$node_discount_type]['discount_code'])
  && empty($form_state['values']['field_s_discount_code'][LANGUAGE_NONE][0]['value'])) {

    form_set_error('field_s_discount_code', t('Code is required for this discount type.'));
  }
}

/**
 * Load active discounts.
 *
 * @return array
 */
function oct_store_discounts_load_active($reset = FALSE) {

  $cid = 'oct_store_discounts_load_active';

  if(!$reset && $cache = cache_get($cid)) {
    return $cache->data;
  } else {

    module_load_include('inc', 'fnl_store', 'includes/fnl_store.helpers');
    $result = fnl_store_views_retrieve('oct_store_discounts_data', 'default');

    $results_keyed_by_nid = oct_store_discounts_prepare_discounts($result);

    cache_set($cid, $results_keyed_by_nid);
    return $results_keyed_by_nid;
  }
}

/**
 * Load active discounts with code.
 *
 * @param string $code get discounts with given code.
 * @return array
 */
function oct_store_discounts_load_active_by_code($code) {

  module_load_include('inc', 'fnl_store', 'includes/fnl_store.helpers');
  $arguments = array();

  $arguments[] = $code;

  $result = fnl_store_views_retrieve('oct_store_discounts_data', 'default', array(), $arguments);

  $results_keyed_by_nid = oct_store_discounts_prepare_discounts($result);

  return $results_keyed_by_nid;
}

/**
 * Formatting discounts view result.
 */
function oct_store_discounts_prepare_discounts($view_result) {

  $results_keyed_by_nid = array();
  foreach ($view_result as &$item) {
    $item->products = !empty($item->products) ? explode(', ', $item->products) : array();
    $results_keyed_by_nid[$item->nid] = $item;
  }

  return $results_keyed_by_nid;
}

/**
 * Implements hook_entity_presave().
 */
function oct_store_discounts_entity_presave($entity, $type) {

  if ($type == 'node' && $entity->type === 'store_discount') {
    //reset discounts cache
    cache_clear_all('oct_store_discounts_load_active', 'cache');


    $discount_types_info = oct_store_discounts_types_info();
    $discount_type = $entity->field_s_discount_type[LANGUAGE_NONE][0]['value'];

    if(empty($discount_types_info[$discount_type]['discount_code'])) {
      //clear code value for this fields
      $entity->field_s_discount_code = array();
    }

    if(empty($discount_types_info[$discount_type]['products_filter_in_node'])) {
      //clear code value for this fields
      $entity->field_s_discount_products = array();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function oct_store_discounts_node_delete($node) {
  //reset discounts cache
  if($node->type === 'store_discount') {
    cache_clear_all('oct_store_discounts_load_active', 'cache');
  }
}